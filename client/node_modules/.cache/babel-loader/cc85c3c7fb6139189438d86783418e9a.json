{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming stuff\\\\git-strauss\\\\client\\\\src\\\\context\\\\auth-context.jsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport fetchData from \"../services/api\";\nconst AuthContext = createContext();\nexport function AuthProvider({\n  children\n}) {\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [jwt, setJwt] = useState(null);\n  const {\n    user\n  } = useAuth(); // Access the user object from the context\n\n  const login = userData => {\n    console.log(\"userData\");\n    fetchData(\"/auth/signIn\", \"login\", null, userData).then(res => {\n      setJwt(res.token); // setUser(res.user);\n    }).catch(error => {\n      console.error(\"Error fetching users:\", error);\n    }); // Implement login logic here and set the user object if successful\n\n    setLoggedInUser(userData);\n  };\n\n  const register = async userData => {\n    await fetchData(\"/auth/signup\", \"post\", null, userData).then(async data => {\n      if (data.error) return data.error;\n      await setLoggedInUser(data.user);\n      await login(data.user); // setJwt(data.jwt);\n    }).catch(error => {\n      console.error(\"Error fetching users:\", error);\n      return error;\n    });\n    setLoggedInUser(userData);\n  };\n\n  const logout = () => {\n    // Implement logout logic here and remove the user object\n    setLoggedInUser(null);\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      loggedInUser,\n      jwt,\n      login,\n      logout,\n      register\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useAuth() {\n  return useContext(AuthContext);\n}","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/context/auth-context.jsx"],"names":["React","createContext","useContext","useState","fetchData","AuthContext","AuthProvider","children","loggedInUser","setLoggedInUser","jwt","setJwt","user","useAuth","login","userData","console","log","then","res","token","catch","error","register","data","logout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAWC,OAAO,EAAxB,CAHyC,CAGb;;AAE5B,QAAMC,KAAK,GAAIC,QAAD,IAAc;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAb,IAAAA,SAAS,CAAC,cAAD,EAAiB,OAAjB,EAA0B,IAA1B,EAAgCW,QAAhC,CAAT,CACGG,IADH,CACSC,GAAD,IAAS;AACbR,MAAAA,MAAM,CAACQ,GAAG,CAACC,KAAL,CAAN,CADa,CAEb;AACD,KAJH,EAKGC,KALH,CAKUC,KAAD,IAAW;AAChBN,MAAAA,OAAO,CAACM,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACD,KAPH,EAF0B,CAU1B;;AACAb,IAAAA,eAAe,CAACM,QAAD,CAAf;AACD,GAZD;;AAcA,QAAMQ,QAAQ,GAAG,MAAOR,QAAP,IAAoB;AACnC,UAAMX,SAAS,CAAC,cAAD,EAAiB,MAAjB,EAAyB,IAAzB,EAA+BW,QAA/B,CAAT,CACHG,IADG,CACE,MAAOM,IAAP,IAAgB;AACpB,UAAIA,IAAI,CAACF,KAAT,EAAgB,OAAOE,IAAI,CAACF,KAAZ;AAChB,YAAMb,eAAe,CAACe,IAAI,CAACZ,IAAN,CAArB;AACA,YAAME,KAAK,CAACU,IAAI,CAACZ,IAAN,CAAX,CAHoB,CAIpB;AACD,KANG,EAOHS,KAPG,CAOIC,KAAD,IAAW;AAChBN,MAAAA,OAAO,CAACM,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACA,aAAOA,KAAP;AACD,KAVG,CAAN;AAWAb,IAAAA,eAAe,CAACM,QAAD,CAAf;AACD,GAbD;;AAeA,QAAMU,MAAM,GAAG,MAAM;AACnB;AACAhB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAHD;;AAKA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAED,MAAAA,YAAF;AAAgBE,MAAAA,GAAhB;AAAqBI,MAAAA,KAArB;AAA4BW,MAAAA,MAA5B;AAAoCF,MAAAA;AAApC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGhB,QAHH,CADF;AAOD;AAED,OAAO,SAASM,OAAT,GAAmB;AACxB,SAAOX,UAAU,CAACG,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport fetchData from \"../services/api\";\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [loggedInUser, setLoggedInUser] = useState(null);\r\n  const [jwt, setJwt] = useState(null);\r\n  const { user } = useAuth(); // Access the user object from the context\r\n\r\n  const login = (userData) => {\r\n    console.log(\"userData\");\r\n    fetchData(\"/auth/signIn\", \"login\", null, userData)\r\n      .then((res) => {\r\n        setJwt(res.token);\r\n        // setUser(res.user);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching users:\", error);\r\n      });\r\n    // Implement login logic here and set the user object if successful\r\n    setLoggedInUser(userData);\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    await fetchData(\"/auth/signup\", \"post\", null, userData)\r\n      .then(async (data) => {\r\n        if (data.error) return data.error;\r\n        await setLoggedInUser(data.user);\r\n        await login(data.user);\r\n        // setJwt(data.jwt);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching users:\", error);\r\n        return error;\r\n      });\r\n    setLoggedInUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Implement logout logic here and remove the user object\r\n    setLoggedInUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ loggedInUser, jwt, login, logout, register }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}