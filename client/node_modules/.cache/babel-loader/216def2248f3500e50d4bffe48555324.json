{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming stuff\\\\git-strauss\\\\client\\\\src\\\\components\\\\ListDashboard.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useCandidates } from \"../context/candidates-context\";\nimport { Row, Card, Button, ListGroup, Container } from \"react-bootstrap\";\nexport default function ListDashboard(currentCandidates) {\n  const navigate = useNavigate();\n  const {\n    chooseCandidate\n  } = useCandidates();\n  const [candidatesToDislpay, setCandidatesToDislpay] = useState([]);\n  useEffect(() => {\n    if (currentCandidates.currentCandidates.length > 0) {\n      setCandidatesToDislpay(currentCandidates.currentCandidates);\n    }\n  }, [currentCandidates]);\n  return /*#__PURE__*/React.createElement(Row, {\n    className: \"rows-candidate-cards\",\n    gap: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, candidatesToDislpay.length > 0 && candidatesToDislpay.map((cand, index) => {\n    return /*#__PURE__*/React.createElement(ListGroup, {\n      key: index,\n      horizontal: true // className=\"my-2\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }, cand.first_name, \" \", cand.last_name), /*#__PURE__*/React.createElement(ListGroup.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, cand.job_title));\n  }));\n}","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/components/ListDashboard.jsx"],"names":["React","useEffect","useState","useNavigate","useCandidates","Row","Card","Button","ListGroup","Container","ListDashboard","currentCandidates","navigate","chooseCandidate","candidatesToDislpay","setCandidatesToDislpay","length","map","cand","index","first_name","last_name","job_title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,SAA5B,EAAuCC,SAAvC,QAAwD,iBAAxD;AAEA,eAAe,SAASC,aAAT,CAAuBC,iBAAvB,EAA0C;AACvD,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAsBT,aAAa,EAAzC;AACA,QAAM,CAACU,mBAAD,EAAsBC,sBAAtB,IAAgDb,QAAQ,CAAC,EAAD,CAA9D;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,iBAAiB,CAACA,iBAAlB,CAAoCK,MAApC,GAA6C,CAAjD,EAAoD;AAClDD,MAAAA,sBAAsB,CAACJ,iBAAiB,CAACA,iBAAnB,CAAtB;AACD;AACF,GAJQ,EAIN,CAACA,iBAAD,CAJM,CAAT;AAKA,sBACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,GAAG,EAAE,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,mBAAmB,CAACE,MAApB,GAA6B,CAA7B,IACCF,mBAAmB,CAACG,GAApB,CAAwB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvC,wBACE,oBAAC,SAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,UAAU,MAFZ,CAGE;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACE,UADR,OACqBF,IAAI,CAACG,SAD1B,CAVF,eAaE,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBH,IAAI,CAACI,SAAtB,CAbF,CADF;AAkBD,GAnBD,CAFJ,CADF;AAyBD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useCandidates } from \"../context/candidates-context\";\r\nimport { Row, Card, Button, ListGroup, Container } from \"react-bootstrap\";\r\n\r\nexport default function ListDashboard(currentCandidates) {\r\n  const navigate = useNavigate();\r\n  const { chooseCandidate } = useCandidates();\r\n  const [candidatesToDislpay, setCandidatesToDislpay] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (currentCandidates.currentCandidates.length > 0) {\r\n      setCandidatesToDislpay(currentCandidates.currentCandidates);\r\n    }\r\n  }, [currentCandidates]);\r\n  return (\r\n    <Row className=\"rows-candidate-cards\" gap={2}>\r\n      {candidatesToDislpay.length > 0 &&\r\n        candidatesToDislpay.map((cand, index) => {\r\n          return (\r\n            <ListGroup\r\n              key={index}\r\n              horizontal\r\n              // className=\"my-2\"\r\n            >\r\n              {/* <Card.Img\r\n                // variant=\"top\"\r\n                src={cand.avatar}\r\n                className=\"candidate-list-img\"\r\n              />{\" \"} */}\r\n              <ListGroup.Item>\r\n                {cand.first_name} {cand.last_name}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>{cand.job_title}</ListGroup.Item>\r\n              {/* <ListGroup.Item>and above!</ListGroup.Item> */}\r\n            </ListGroup>\r\n          );\r\n        })}\r\n    </Row>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}