{"ast":null,"code":"import { ListGroupItem } from \"react-bootstrap\";\nconst URL = \"http://localhost:8000\";\nexport default async function fetchData(url, chosenMethod, token, data) {\n  let options = {\n    method: method[chosenMethod],\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  switch (chosenMethod) {\n    case \"put\":\n      options = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      };\n      break;\n\n    case \"patch\":\n      options = {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      };\n      break;\n\n    case \"delete\":\n      options = {\n        method: \"DELETE\"\n      };\n\n    case \"login\":\n      options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      };\n      break;\n\n    default:\n      break;\n  }\n\n  try {\n    const response = await fetch(`${URL}${url}`, options);\n\n    if (response.ok) {\n      return await response.json();\n    } else {\n      const errorText = (await JSON.parse((await response.text()))).error;\n      throw errorText;\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    throw error; // Re-throw the error to be handled by the caller\n  }\n}\nconst METHODS = {\n  get: \"GET\",\n  post: \"POST\",\n  put: \"PUT\",\n  patch: \"PATCH\",\n  delete: \"DELETE\"\n};","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/services/api.js"],"names":["ListGroupItem","URL","fetchData","url","chosenMethod","token","data","options","method","headers","Authorization","body","JSON","stringify","response","fetch","ok","json","errorText","parse","text","error","console","METHODS","get","post","put","patch","delete"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,eAAe,eAAeC,SAAf,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4CC,KAA5C,EAAmDC,IAAnD,EAAyD;AACtE,MAAIC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAEA,MAAM,CAACJ,YAAD,CADF;AAEZK,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFG,GAAd;;AAOA,MAAIJ,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACE,OAAR,CAAgBC,aAAhB,GAAiC,UAASL,KAAM,EAAhD;AACD;;AAED,MAAIC,IAAJ,EAAU;AACRC,IAAAA,OAAO,CAACI,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAf;AACD;;AAED,UAAQF,YAAR;AACE,SAAK,KAAL;AACEG,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE,KADA;AAERC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFD;AAKRE,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALE,OAAV;AAOA;;AAEF,SAAK,OAAL;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE,OADA;AAERC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFD;AAKRE,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALE,OAAV;AAOA;;AAEF,SAAK,QAAL;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE;AADA,OAAV;;AAGF,SAAK,OAAL;AACED,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE,MADA;AAERC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFD;AAKRE,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALE,OAAV;AAOA;;AAEF;AACE;AApCJ;;AAsCA,MAAI;AACF,UAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEd,GAAI,GAAEE,GAAI,EAAd,EAAiBI,OAAjB,CAA5B;;AACA,QAAIO,QAAQ,CAACE,EAAb,EAAiB;AACf,aAAO,MAAMF,QAAQ,CAACG,IAAT,EAAb;AACD,KAFD,MAEO;AACL,YAAMC,SAAS,GAAG,CAAC,MAAMN,IAAI,CAACO,KAAL,EAAW,MAAML,QAAQ,CAACM,IAAT,EAAjB,EAAP,EAA0CC,KAA5D;AACA,YAAMH,SAAN;AACD;AACF,GARD,CAQE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,oBAAd,EAAoCA,KAApC;AACA,UAAMA,KAAN,CAFc,CAED;AACd;AACF;AAED,MAAME,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,KADS;AAEdC,EAAAA,IAAI,EAAE,MAFQ;AAGdC,EAAAA,GAAG,EAAE,KAHS;AAIdC,EAAAA,KAAK,EAAE,OAJO;AAKdC,EAAAA,MAAM,EAAE;AALM,CAAhB","sourcesContent":["import { ListGroupItem } from \"react-bootstrap\";\r\n\r\nconst URL = \"http://localhost:8000\";\r\n\r\nexport default async function fetchData(url, chosenMethod, token, data) {\r\n  let options = {\r\n    method: method[chosenMethod],\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  if (token) {\r\n    options.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  switch (chosenMethod) {\r\n    case \"put\":\r\n      options = {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      };\r\n      break;\r\n\r\n    case \"patch\":\r\n      options = {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      };\r\n      break;\r\n\r\n    case \"delete\":\r\n      options = {\r\n        method: \"DELETE\",\r\n      };\r\n    case \"login\":\r\n      options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      };\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  try {\r\n    const response = await fetch(`${URL}${url}`, options);\r\n    if (response.ok) {\r\n      return await response.json();\r\n    } else {\r\n      const errorText = (await JSON.parse(await response.text())).error;\r\n      throw errorText;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"An error occurred:\", error);\r\n    throw error; // Re-throw the error to be handled by the caller\r\n  }\r\n}\r\n\r\nconst METHODS = {\r\n  get: \"GET\",\r\n  post: \"POST\",\r\n  put: \"PUT\",\r\n  patch: \"PATCH\",\r\n  delete: \"DELETE\",\r\n};\r\n"]},"metadata":{},"sourceType":"module"}