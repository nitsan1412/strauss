{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming stuff\\\\git-strauss\\\\client\\\\src\\\\pages\\\\Dashboard.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useCandidates } from \"../context/candidates-context\";\nimport { useAuth } from \"../context/auth-context\";\nimport { Row, Button, Container } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/dashboard.css\";\nimport CradsDashboard from \"../components/CradsDashboard\";\nimport ListDashboard from \"../components/ListDashboard\";\nimport CustomPagination from \"../components/CustomPagination\";\n\nfunction Home() {\n  const {\n    getCandidates,\n    candidates,\n    updatePaginationData,\n    paginationData\n  } = useCandidates();\n  const {\n    jwt\n  } = useAuth();\n  const navigate = useNavigate();\n  const [isList, setIsList] = useState(false);\n  const [page, setPage] = useState(paginationData.page || 0);\n  const [limit, setLimit] = useState(paginationData.limit || 20);\n  const [currentCandidates, setCurrentCandidates] = useState([]);\n  useEffect(() => {\n    if (jwt) {\n      getCandidates();\n    } else {\n      navigate(\"../\");\n    }\n  }, []);\n  useEffect(() => {\n    if (candidates.length > 0) {\n      setCurrentCandidates(candidates);\n    }\n  }, [candidates]);\n  useEffect(() => {\n    setPage(paginationData.page);\n    setLimit(paginationData.limit);\n  }, [paginationData.page, paginationData.limit]);\n\n  const changeDisplay = () => {\n    setIsList(!isList);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"candidates\")), /*#__PURE__*/React.createElement(Row, {\n    className: \"pagination-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomPagination, {\n    currentPage: page,\n    totalPages: paginationData.numberOfPages,\n    onPageChange: newpage => updatePaginationData(\"page\", newpage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(Button, {\n    className: \"list-button\",\n    onClick: () => changeDisplay(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, isList ? \"show in cards\" : \"show as a list\")), currentCandidates.length > 0 ? isList ? /*#__PURE__*/React.createElement(ListDashboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(CradsDashboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default Home;","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/pages/Dashboard.jsx"],"names":["React","useEffect","useState","useCandidates","useAuth","Row","Button","Container","useNavigate","CradsDashboard","ListDashboard","CustomPagination","Home","getCandidates","candidates","updatePaginationData","paginationData","jwt","navigate","isList","setIsList","page","setPage","limit","setLimit","currentCandidates","setCurrentCandidates","length","changeDisplay","numberOfPages","newpage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useCandidates } from \"../context/candidates-context\";\r\nimport { useAuth } from \"../context/auth-context\";\r\nimport { Row, Button, Container } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/dashboard.css\";\r\nimport CradsDashboard from \"../components/CradsDashboard\";\r\nimport ListDashboard from \"../components/ListDashboard\";\r\nimport CustomPagination from \"../components/CustomPagination\";\r\nfunction Home() {\r\n  const { getCandidates, candidates, updatePaginationData, paginationData } =\r\n    useCandidates();\r\n  const { jwt } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [isList, setIsList] = useState(false);\r\n\r\n  const [page, setPage] = useState(paginationData.page || 0);\r\n  const [limit, setLimit] = useState(paginationData.limit || 20);\r\n  const [currentCandidates, setCurrentCandidates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (jwt) {\r\n      getCandidates();\r\n    } else {\r\n      navigate(\"../\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (candidates.length > 0) {\r\n      setCurrentCandidates(candidates);\r\n    }\r\n  }, [candidates]);\r\n\r\n  useEffect(() => {\r\n    setPage(paginationData.page);\r\n    setLimit(paginationData.limit);\r\n  }, [paginationData.page, paginationData.limit]);\r\n\r\n  const changeDisplay = () => {\r\n    setIsList(!isList);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"dashboard-container\">\r\n      <Row>\r\n        <h2>candidates</h2>\r\n      </Row>\r\n      <Row className=\"pagination-row\">\r\n        <CustomPagination\r\n          currentPage={page}\r\n          totalPages={paginationData.numberOfPages}\r\n          onPageChange={(newpage) => updatePaginationData(\"page\", newpage)}\r\n        />{\" \"}\r\n        <Button className=\"list-button\" onClick={() => changeDisplay()}>\r\n          {isList ? \"show in cards\" : \"show as a list\"}\r\n        </Button>\r\n      </Row>\r\n      {currentCandidates.length > 0 ? (\r\n        isList ? (\r\n          <ListDashboard  />\r\n        ) : (\r\n          <CradsDashboard  />\r\n        )\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}