{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming stuff\\\\git-strauss\\\\client\\\\src\\\\context\\\\auth-context.jsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport fetchData from \"../services/api\";\nconst AuthContext = createContext();\nexport function AuthProvider({\n  children\n}) {\n  const [user, setUser] = useState(null);\n  const [jwt, setJwt] = useState(null);\n\n  const login = userData => {\n    fetchData(\"/auth/signIn\", \"login\", null, userData).then(res => {\n      setJwt(res.token); // setUser(res.user);\n    }).catch(error => {\n      console.error(\"Error fetching users:\", error);\n    }); // Implement login logic here and set the user object if successful\n\n    setUser(userData);\n  };\n\n  const register = async userData => {\n    await fetchData(\"/auth/signup\", \"post\", null, userData).then(async data => {\n      if (data.includes(\"username\")) {\n        console.log(\"data in register\", data);\n        return { ...errors,\n          username: gotErrorsFromDb\n        };\n      } else if (data.includes(\"email\")) {\n        setErrors({ ...errors,\n          email: gotErrorsFromDb\n        });\n      } else {\n        await setUser(userData);\n        await login(userData);\n      } // setJwt(data.jwt);\n\n    }).catch(error => {\n      console.error(\"Error fetching users:\", error);\n      return error;\n    });\n    setUser(userData);\n  };\n\n  const logout = () => {\n    // Implement logout logic here and remove the user object\n    setUser(null);\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user,\n      jwt,\n      login,\n      logout,\n      register\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useAuth() {\n  return useContext(AuthContext);\n}","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/context/auth-context.jsx"],"names":["React","createContext","useContext","useState","fetchData","AuthContext","AuthProvider","children","user","setUser","jwt","setJwt","login","userData","then","res","token","catch","error","console","register","data","includes","log","errors","username","gotErrorsFromDb","setErrors","email","logout","useAuth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,IAAD,CAA9B;;AAEA,QAAMS,KAAK,GAAIC,QAAD,IAAc;AAC1BT,IAAAA,SAAS,CAAC,cAAD,EAAiB,OAAjB,EAA0B,IAA1B,EAAgCS,QAAhC,CAAT,CACGC,IADH,CACSC,GAAD,IAAS;AACbJ,MAAAA,MAAM,CAACI,GAAG,CAACC,KAAL,CAAN,CADa,CAEb;AACD,KAJH,EAKGC,KALH,CAKUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACD,KAPH,EAD0B,CAS1B;;AACAT,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAXD;;AAaA,QAAMO,QAAQ,GAAG,MAAOP,QAAP,IAAoB;AACnC,UAAMT,SAAS,CAAC,cAAD,EAAiB,MAAjB,EAAyB,IAAzB,EAA+BS,QAA/B,CAAT,CACHC,IADG,CACE,MAAOO,IAAP,IAAgB;AACpB,UAAIA,IAAI,CAACC,QAAL,CAAc,UAAd,CAAJ,EAAgC;AAC9BH,QAAAA,OAAO,CAACI,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACA,eAAQ,EAAE,GAAGG,MAAL;AAAaC,UAAAA,QAAQ,EAAEC;AAAvB,SAAR;AACD,OAHD,MAGO,IAAIL,IAAI,CAACC,QAAL,CAAc,OAAd,CAAJ,EAA4B;AACjCK,QAAAA,SAAS,CAAC,EAAE,GAAGH,MAAL;AAAaI,UAAAA,KAAK,EAAEF;AAApB,SAAD,CAAT;AACD,OAFM,MAEA;AACL,cAAMjB,OAAO,CAACI,QAAD,CAAb;AACA,cAAMD,KAAK,CAACC,QAAD,CAAX;AACD,OATmB,CAUpB;;AACD,KAZG,EAaHI,KAbG,CAaIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACA,aAAOA,KAAP;AACD,KAhBG,CAAN;AAiBAT,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAnBD;;AAqBA,QAAMgB,MAAM,GAAG,MAAM;AACnB;AACApB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAED,MAAAA,IAAF;AAAQE,MAAAA,GAAR;AAAaE,MAAAA,KAAb;AAAoBiB,MAAAA,MAApB;AAA4BT,MAAAA;AAA5B,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,QADH,CADF;AAKD;AAED,OAAO,SAASuB,OAAT,GAAmB;AACxB,SAAO5B,UAAU,CAACG,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport fetchData from \"../services/api\";\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [jwt, setJwt] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    fetchData(\"/auth/signIn\", \"login\", null, userData)\r\n      .then((res) => {\r\n        setJwt(res.token);\r\n        // setUser(res.user);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching users:\", error);\r\n      });\r\n    // Implement login logic here and set the user object if successful\r\n    setUser(userData);\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    await fetchData(\"/auth/signup\", \"post\", null, userData)\r\n      .then(async (data) => {\r\n        if (data.includes(\"username\") ) {\r\n          console.log(\"data in register\", data);\r\n          return ({ ...errors, username: gotErrorsFromDb });\r\n        } else if (data.includes(\"email\") ){\r\n          setErrors({ ...errors, email: gotErrorsFromDb });\r\n        } else {\r\n          await setUser(userData);\r\n          await login(userData);\r\n        }\r\n        // setJwt(data.jwt);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching users:\", error);\r\n        return error;\r\n      });\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Implement logout logic here and remove the user object\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, jwt, login, logout, register }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}