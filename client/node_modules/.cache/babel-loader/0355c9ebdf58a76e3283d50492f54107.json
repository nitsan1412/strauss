{"ast":null,"code":"export default function validateForm(fieldsArray, data) {\n  const errors = {};\n  fieldsArray.forEach(field => {\n    if (!data[field]) {\n      errors[field] = `${field} is a required field`;\n    } else if (FIELDS[field].validate) errors[field] = FIELDS[field].error;\n  });\n  return {\n    errors\n  };\n}\nconst FIELDS = {\n  email: {\n    validate: () => !/\\S+@\\S+\\.\\S+/.test(data.email),\n    error: \"Invalid email format\"\n  },\n  password: {\n    validate: () => data.password.length < 8,\n    error: \"password must be at least 8 characters long\"\n  },\n  username: {\n    validate: () => data.username.length < 4,\n    error: \"username must be at least 4 characters long\"\n  }\n};","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/helper/validations.js"],"names":["validateForm","fieldsArray","data","errors","forEach","field","FIELDS","validate","error","email","test","password","length","username"],"mappings":"AAAA,eAAe,SAASA,YAAT,CAAsBC,WAAtB,EAAmCC,IAAnC,EAAyC;AACtD,QAAMC,MAAM,GAAG,EAAf;AAEAF,EAAAA,WAAW,CAACG,OAAZ,CAAqBC,KAAD,IAAW;AAC7B,QAAI,CAACH,IAAI,CAACG,KAAD,CAAT,EAAkB;AAChBF,MAAAA,MAAM,CAACE,KAAD,CAAN,GAAiB,GAAEA,KAAM,sBAAzB;AACD,KAFD,MAEO,IAAIC,MAAM,CAACD,KAAD,CAAN,CAAcE,QAAlB,EAA4BJ,MAAM,CAACE,KAAD,CAAN,GAAgBC,MAAM,CAACD,KAAD,CAAN,CAAcG,KAA9B;AAGpC,GAND;AAQA,SAAO;AAAEL,IAAAA;AAAF,GAAP;AACD;AACD,MAAMG,MAAM,GAAG;AACbG,EAAAA,KAAK,EAAE;AACLF,IAAAA,QAAQ,EAAE,MAAM,CAAC,eAAeG,IAAf,CAAoBR,IAAI,CAACO,KAAzB,CADZ;AAELD,IAAAA,KAAK,EAAE;AAFF,GADM;AAKbG,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,QAAQ,EAAE,MAAML,IAAI,CAACS,QAAL,CAAcC,MAAd,GAAuB,CAD/B;AAERJ,IAAAA,KAAK,EAAE;AAFC,GALG;AASbK,EAAAA,QAAQ,EAAE;AACRN,IAAAA,QAAQ,EAAE,MAAML,IAAI,CAACW,QAAL,CAAcD,MAAd,GAAuB,CAD/B;AAERJ,IAAAA,KAAK,EAAE;AAFC;AATG,CAAf","sourcesContent":["export default function validateForm(fieldsArray, data) {\r\n  const errors = {};\r\n\r\n  fieldsArray.forEach((field) => {\r\n    if (!data[field]) {\r\n      errors[field] = `${field} is a required field`;\r\n    } else if (FIELDS[field].validate) errors[field] = FIELDS[field].error;\r\n\r\n    \r\n  });\r\n\r\n  return { errors };\r\n}\r\nconst FIELDS = {\r\n  email: {\r\n    validate: () => !/\\S+@\\S+\\.\\S+/.test(data.email),\r\n    error: \"Invalid email format\",\r\n  },\r\n  password: {\r\n    validate: () => data.password.length < 8,\r\n    error: \"password must be at least 8 characters long\",\r\n  },\r\n  username: {\r\n    validate: () => data.username.length < 4,\r\n    error: \"username must be at least 4 characters long\",\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}