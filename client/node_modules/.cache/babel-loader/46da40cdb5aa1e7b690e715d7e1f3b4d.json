{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming stuff\\\\git-strauss\\\\client\\\\src\\\\pages\\\\Dashboard.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useCandidates } from \"../context/candidates-context\";\nimport { useAuth } from \"../context/auth-context\";\nimport { Row, Button, Card, Container } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/dashboard.css\";\nimport CradsDashboard from \"../components/CradsDashboard\";\nimport ListDashboard from \"../components/ListDashboard\";\nimport CustomPagination from \"../components/CustomPagination\";\n\nfunction Home() {\n  const {\n    getCandidates,\n    candidates,\n    updatePaginationData,\n    paginationData\n  } = useCandidates();\n  const {\n    jwt\n  } = useAuth();\n  const navigate = useNavigate();\n  const [isList, setIsList] = useState(false);\n  const [page, setPage] = useState(paginationData.page || 0);\n  const [limit, setLimit] = useState(paginationData.limit || 20);\n  const [currentCandidates, setCurrentCandidates] = useState([]);\n  useEffect(() => {\n    if (jwt) {\n      getCandidates();\n    } else {\n      navigate(\"../\");\n    }\n  }, []);\n  useEffect(() => {\n    if (candidates.length > 0) {\n      setCurrentCandidates(candidates);\n    }\n  }, [candidates]);\n  useEffect(() => {\n    setPage(paginationData.page);\n    setLimit(paginationData.limit);\n  }, [paginationData.page, paginationData.limit]);\n\n  const changeDisplay = () => {\n    setIsList(!isList);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"candidates\")), /*#__PURE__*/React.createElement(Row, {\n    className: \"pagination-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomPagination, {\n    currentPage: page,\n    totalPages: paginationData.numberOfPages,\n    onPageChange: page => updatePaginationData(\"page\", page),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(Button, {\n    className: \"list-button\",\n    onClick: () => changeDisplay(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, isList ? \"show in cards\" : \"show as a list\")), currentCandidates.length > 0 ? isList ? /*#__PURE__*/React.createElement(ListDashboard, {\n    currentCandidates: currentCandidates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(CradsDashboard, {\n    currentCandidates: currentCandidates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default Home;","map":{"version":3,"sources":["D:/programming stuff/git-strauss/client/src/pages/Dashboard.jsx"],"names":["React","useEffect","useState","useCandidates","useAuth","Row","Button","Card","Container","useNavigate","CradsDashboard","ListDashboard","CustomPagination","Home","getCandidates","candidates","updatePaginationData","paginationData","jwt","navigate","isList","setIsList","page","setPage","limit","setLimit","currentCandidates","setCurrentCandidates","length","changeDisplay","numberOfPages"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useCandidates } from \"../context/candidates-context\";\r\nimport { useAuth } from \"../context/auth-context\";\r\nimport { Row, Button, Card, Container } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/dashboard.css\";\r\nimport CradsDashboard from \"../components/CradsDashboard\";\r\nimport ListDashboard from \"../components/ListDashboard\";\r\nimport CustomPagination from \"../components/CustomPagination\";\r\nfunction Home() {\r\n  const {\r\n    getCandidates,\r\n    candidates,\r\n    updatePaginationData,\r\n    paginationData,\r\n  } = useCandidates();\r\n  const { jwt } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [isList, setIsList] = useState(false);\r\n\r\n  const [page, setPage] = useState(paginationData.page || 0);\r\n  const [limit, setLimit] = useState(paginationData.limit || 20);\r\n  const [currentCandidates, setCurrentCandidates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (jwt) {\r\n      getCandidates();\r\n    } else {\r\n      navigate(\"../\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (candidates.length > 0) {\r\n      setCurrentCandidates(candidates);\r\n    }\r\n  }, [candidates]);\r\n\r\n  useEffect(() => {\r\n    setPage(paginationData.page);\r\n    setLimit(paginationData.limit);\r\n  }, [paginationData.page, paginationData.limit]);\r\n\r\n  const changeDisplay = () => {\r\n    setIsList(!isList);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"dashboard-container\">\r\n      <Row>\r\n        <h2>candidates</h2>\r\n      </Row>\r\n      <Row className=\"pagination-row\">\r\n        <CustomPagination\r\n          currentPage={page}\r\n          totalPages={paginationData.numberOfPages}\r\n          onPageChange={(page) => updatePaginationData(\"page\", page)}\r\n        />{\" \"}\r\n        <Button className=\"list-button\" onClick={() => changeDisplay()}>\r\n          {isList ? \"show in cards\" : \"show as a list\"}\r\n        </Button>\r\n      </Row>\r\n      {currentCandidates.length > 0 ? (\r\n        isList ? (\r\n          <ListDashboard currentCandidates={currentCandidates} />\r\n        ) : (\r\n          <CradsDashboard currentCandidates={currentCandidates} />\r\n        )\r\n      ) : (\r\n        <></>\r\n      )}\r\n     \r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}